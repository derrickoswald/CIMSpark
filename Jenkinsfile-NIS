pipeline {
    agent {
        label 'cimapp'
    }
    tools {
        maven 'maven'
    }
    options {
        buildDiscarder(logRotator(numToKeepStr: '5', artifactNumToKeepStr:'5'))
    }
    parameters {
        booleanParam defaultValue: true, description: 'Build', name: 'BUILD'
        booleanParam defaultValue: true, description: 'CIMReader', name: 'CIMReader'
        booleanParam defaultValue: true, description: 'CIMExport', name: 'CIMExport'
    }
    stages {
        stage ('Build') {
            when {
                expression {
                    return params.BUILD
                }
            }
            steps {
                withMaven(
                    maven: 'maven',
                    mavenLocalRepo: '../../maven_repos/'+BRANCH_NAME,
                    options: [
                        junitPublisher(disabled: true),
                        artifactsPublisher(disabled: true),
                        spotbugsPublisher(healthy: '10', unHealthy: '100')
                    ]
                ) {
                    sh 'mvn -B -U -DskipTests -Dgpg.skip -DskipITs -Dscaladoc.skip=true clean install'
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: 'CIMReader/target/*.jar', fingerprint: true
                }
            }
        }

        stage('Test') {
            parallel{
                stage("Test CIMReader") {
                    when {
                        expression {
                            return params.CIMReader
                        }
                    }
                    steps {
                        withMaven(
                            maven: 'maven',
                            mavenLocalRepo: '../../maven_repos/'+BRANCH_NAME,
                            options: [
                                junitPublisher(disabled: true),
                                artifactsPublisher(disabled: true)
                            ]
                        ) {
                            sh 'mvn verify -pl CIMReader -Dgpg.skip'
                        }
                    }
                    post {
                        always {
                            junit 'CIMReader/target/surefire-reports/*.xml'
                        }
                    }
                }
                stage("Test CIMExport") {
                    when {
                        expression {
                            return params.CIMExport
                        }
                    }
                    steps {
                        withMaven(
                            maven: 'maven',
                            mavenLocalRepo: '../../maven_repos/'+BRANCH_NAME,
                            options: [
                                junitPublisher(disabled: true),
                                artifactsPublisher(disabled: true)
                            ]
                        ) {
                            sh 'mvn verify -pl CIMExport -Dgpg.skip'
                        }
                    }
                    post {
                        always {
                            junit 'CIMExport/target/surefire-reports/*.xml'
                        }
                    }
                }
            }
        }
    }
}